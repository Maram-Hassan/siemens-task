pipeline {
    agent any

    stages {
        stage('Checkout Terraform Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Maram-Hassan/siemens-task.git'
            }
        }

        stage('Install Terraform') {
            steps {
                sh '''
                if ! [ -x "$(command -v terraform)" ]; then
                  wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
                  unzip terraform_1.5.0_linux_amd64.zip
                  sudo mv terraform /usr/local/bin/
                fi
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                withAWS(credentials: 'aws-credentials') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withAWS(credentials: 'aws-credentials') {
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withAWS(credentials: 'aws-credentials') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Get EC2 Public IP and Update Inventory') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -raw instance_public_ip', returnStdout: true).trim()

                    withCredentials([sshUserPrivateKey(credentialsId: 'b7728db5-7ee2-4294-afe8-fcaa0aaf4a2c', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        sh """
                        echo "[nexus_server]" > inventory.txt
                        echo "$ip ansible_user=ubuntu ansible_ssh_private_key_file=${SSH_KEY} ansible_ssh_extra_args='-o ConnectTimeout=60'" >> inventory.txt
                        """
                    }
                }
            }
        }

        stage('Delay Before Ansible Playbook') {
            steps {
                script {
                    echo "Waiting for 2 minutes before proceeding..."
                    sleep time: 120, unit: 'SECONDS'
                    echo "Proceeding to run Ansible playbook..."
                }
            }
        }

        stage('Install Nexus with Ansible') {
            
        }

        stage('Clone React Library Repository') {
           
        }

        stage('Install React Library Dependencies') {
          
        }

        stage('Build React Library') {
            
        }

        stage('Create React Library Package') {
           
        }

        stage('Setup NPM Authentication') {
            
        }

        stage('Publish React Library Package') {
            
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build, infrastructure setup, and artifact upload completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
