pipeline {
    agent any

    stages {
        stage('Checkout Terraform Repository') {
            steps {
                // Checkout your repository
                git branch: 'main', url: 'https://github.com/Maram-Hassan/siemens-task.git'
            }
        }

        stage('Install Terraform') {
            steps {
                // If terraform is not installed on the agent, install it
                sh '''
                if ! [ -x "$(command -v terraform)" ]; then
                  wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
                  unzip terraform_1.5.0_linux_amd64.zip
                  sudo mv terraform /usr/local/bin/
                fi
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                // Use AWS credentials
                withAWS(credentials: 'aws-credentials') {
                    // Run terraform init to initialize the directory
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                // Use AWS credentials
                withAWS(credentials: 'aws-credentials') {
                    // Run terraform plan to see the changes
                    sh 'terraform plan'
                }
            }
        }
        
        stage('Terraform Apply') {
            steps {
                // Use AWS credentials
                withAWS(credentials: 'aws-credentials') {
                    // Run terraform apply to create resources
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        
        stage('Get EC2 Public IP') {
            steps {
                script {
                    // Capture the public IP of the EC2 instance
                    def ip = sh(script: 'terraform output -raw instance_public_ip', returnStdout: true).trim()
                    
                    // Update the inventory file with the new IP
                    sh """
                    echo "[nexus_server]" > inventory.txt
                    echo "$ip ansible_user=ubuntu ansible_ssh_private_key_file=ansible-ec2-key.pem" >> inventory.txt
                    """
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                // Run the Ansible playbook using the updated inventory
                sh """
                ansible-playbook play-book.yml -i inventory.txt --private-key ansible-ec2-key.pem --ssh-extra-args '-o StrictHostKeyChecking=no'
                """
            }
        }
    }

    post {
        always {
            // Clean up workspace after pipeline finishes
            cleanWs()
        }
    }
}
