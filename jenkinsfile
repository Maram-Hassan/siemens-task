pipeline {
    agent any
    
    stages {
        // Stage to checkout the Terraform repository
        stage('Checkout Terraform Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Maram-Hassan/siemens-task.git'
            }
        }

        // Stage to install Terraform
        stage('Install Terraform') {
            steps {
                sh '''
                if ! [ -x "$(command -v terraform)" ]; then
                  wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
                  unzip terraform_1.5.0_linux_amd64.zip
                  sudo mv terraform /usr/local/bin/
                fi
                '''
            }
        }

        // Stage to initialize Terraform
        stage('Terraform Init') {
            steps {
                withAWS(credentials: 'aws-credentials') {
                    sh 'terraform init'
                }
            }
        }

        // Stage to plan the Terraform configuration
        stage('Terraform Plan') {
            steps {
                withAWS(credentials: 'aws-credentials') {
                    sh 'terraform plan'
                }
            }
        }

        // Stage to apply the Terraform configuration
        stage('Terraform Apply') {
            steps {
                withAWS(credentials: 'aws-credentials') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        // Stage to get EC2 public IP and update inventory for Ansible
        stage('Get EC2 Public IP and Update Inventory') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -raw instance_public_ip', returnStdout: true).trim()
                    
                    withCredentials([sshUserPrivateKey(credentialsId: 'b7728db5-7ee2-4294-afe8-fcaa0aaf4a2c', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        sh """
                        echo "[nexus_server]" > inventory.txt
                        echo "$ip ansible_user=ubuntu ansible_ssh_private_key_file=${SSH_KEY} ansible_ssh_extra_args='-o ConnectTimeout=60'" >> inventory.txt
                        """
                    }
                }
            }
        }

        // Stage to delay for EC2 instance readiness
        stage('Delay Before Ansible Playbook') {
            steps {
                script {
                    echo "Waiting for EC2 instance to be ready..."
                    sleep time: 60, unit: 'SECONDS'
                }
            }
        }

        // Stage to install Nexus using Ansible
        stage('Install Nexus') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'b7728db5-7ee2-4294-afe8-fcaa0aaf4a2c', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    sh '''
                    chmod 600 $SSH_KEY  # Ensure correct permissions for the SSH key
                    ansible-playbook play-book.yml -i inventory.txt --private-key ${SSH_KEY} --user ${SSH_USER} --ssh-extra-args "-o StrictHostKeyChecking=no"
                    '''
                }
            }
        }

        // Stage to clone the React library repository
        stage('Clone React Library Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Maram-Hassan/react-library.git'
            }
        }

        // Stage to install dependencies for the React library
        stage('Install React Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        // Stage to build the React library
        stage('Build React Library') {
            steps {
                sh 'npm run build'
            }
        }

        // Stage to create the package for the React library
        stage('Create React Package') {
            steps {
                sh 'npm pack'
            }
        }

        // Stage to set up authentication for npm
        stage('Setup npm Authentication') {
            steps {
                script {
                    def nexusIp = sh(script: 'terraform output -raw instance_public_ip', returnStdout: true).trim()
                    
                    withCredentials([file(credentialsId: 'mynpm-cred', variable: 'NPM_TOKEN')]) {
                        sh "npm config set //${nexusIp}:8081/repository/npm-private/:_authToken=${NPM_TOKEN}"
                    }
                }
            }
        }

        // Stage to publish the React library to Nexus
        stage('Publish React Library to Nexus') {
            steps {
                script {
                    def nexusIp = sh(script: 'terraform output -raw instance_public_ip', returnStdout: true).trim()
                    
                    withCredentials([file(credentialsId: 'mynpm-cred', variable: 'my-npmrc')]) {
                        sh "npm publish --userconfig ${my-npmrc} --loglevel verbose --registry=http://${nexusIp}:8081/repository/npm-private/"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
